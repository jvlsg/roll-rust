on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:

  crate_publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --release --all-features --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Login to Crates
      run: cargo login ${{secrets.CRATESIO_API_KEY}}
    - name: Publish Version
      run: cargo publish
      continue-on-error: true


  build_binaries:
    strategy:
      matrix:
        job:
          - { os: macos-latest,   target: x86_64-apple-darwin,         use-cross: false }
          - { os: windows-latest, target: x86_64-pc-windows-msvc,      use-cross: false }
          - { os: ubuntu-latest , target: x86_64-unknown-linux-gnu,    use-cross: false }
    
    runs-on: ${{ matrix.job.os }}
    name: Build ${{ matrix.job.target }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true      
      
      - name: Building to release
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --target ${{matrix.job.target}} --release --all-features --verbose 
      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: roll-${{matrix.job.target}}
          path: |
            target/${{matrix.job.target}}/release/roll*
            !target/${{matrix.job.target}}/release/roll.d  
  release:
    env:
      RELEASE_PREFIX: roll-${{ github.ref }}-
      MAC: x86_64-apple-darwin
      WIN: x86_64-pc-windows-msvc
      LINUX: x86_64-unknown-linux-gnu
    needs: build_binaries
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts to CWD
        uses: actions/download-artifact@v2

      - name: Package Mac Binaries
        run: zip --junk-paths ${{env.RELEASE_PREFIX}}${{env.MAC}} ./roll-${{env.MAC}}/* README.md

      - name: Package Windows Binaries
        run: zip --junk-paths ${{env.RELEASE_PREFIX}}${{env.WIN}} ./roll-${{env.WIN}}/* README.md

      - name: Package Linux Binaries
        run: zip --junk-paths ${{env.RELEASE_PREFIX}}${{env.LINUX}} ./roll-${{env.LINUX}}/* README.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      
      - name: Upload Mac Release 
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{env.RELEASE_PREFIX}}${{env.MAC}}.zip
          asset_name: ${{env.RELEASE_PREFIX}}${{env.MAC}}.zip
          asset_content_type: application/zip

      - name: Upload Win Release 
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{env.RELEASE_PREFIX}}${{env.WIN}}.zip
          asset_name: ${{env.RELEASE_PREFIX}}${{env.WIN}}.zip
          asset_content_type: application/zip

      - name: Upload Linux Release 
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{env.RELEASE_PREFIX}}${{env.LINUX}}.zip
          asset_name: ${{env.RELEASE_PREFIX}}${{env.LINUX}}.zip
          asset_content_type: application/zip

